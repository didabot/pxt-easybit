{
  "Audio.next": "播放下一个音频.",
  "Audio.pause": "暂停播放.",
  "Audio.play": "开始播放",
  "Audio.playNumber": "播放指定序号的音频",
  "Audio.playNumber|param|num": "音频的序号",
  "Audio.previous": "播放下一个音律",
  "Audio.setVolume": "设置音量",
  "Audio.stop": "停止播放",
  "Audio.volumeDown": "音量减小",
  "Audio.volumeUp": "音量增加",
  "Controller.OctopusClearAllLeds": "清除八爪鱼板上的所有彩灯",
  "Controller.OctopusRunMotor": "以一定的速度启动电机",
  "Controller.OctopusRunMotorDuration": "以一定的速度启动电机并持续一段时间后停止",
  "Controller.OctopusRunMotorDuration|param|duration": "持续时间(毫秒)",
  "Controller.OctopusRunMotorDuration|param|m": "电机编号, 例如: M1, M2",
  "Controller.OctopusRunMotorDuration|param|speed": "目标速度",
  "Controller.OctopusRunMotor|param|m": "电机编号, 例如: M1, M2",
  "Controller.OctopusRunMotor|param|speed": "目标速度",
  "Controller.OctopusSetLedBrightness": "设置彩灯的亮度",
  "Controller.OctopusSetLedBrightness|param|level": "亮度的等级0-100",
  "Controller.OctopusSetLedColor": "将RGB LED灯的颜色设置为标准颜色",
  "Controller.OctopusSetLedColor|param|color": "要设置的颜色",
  "Controller.OctopusSetLedColor|param|led": "要设置的彩灯的编号, 例如: LED1, LED3",
  "Controller.OctopusSetLedValue": "设置彩灯的RGB三原色的值",
  "Controller.OctopusSetLedValue|param|blue": "RGB三原色的蓝色值",
  "Controller.OctopusSetLedValue|param|green": "RGB三原色的绿色值",
  "Controller.OctopusSetLedValue|param|led": "要设置的彩灯的编号, 例如: LED1, LED3",
  "Controller.OctopusSetLedValue|param|red": "RGB三原色的红色值",
  "Controller.OctopusSetServoAngle": "设置舵机的目标角度",
  "Controller.OctopusSetServoAngle|param|degree": "目标角度, 例如: 0, 30, 109.",
  "Controller.OctopusSetServoAngle|param|servoId": "舵机编号, 例如: S1, S2",
  "Controller.OctopusStopAllMotors": "停止所有通道的电机",
  "Controller.OctopusStopMotor": "停止运行某个电机",
  "Controller.OctopusStopMotor|param|m": "电机编号, 例如: M1, M2",
  "Controller.TurtleClearAllLeds": "清除海龟板上的所有彩灯",
  "Controller.TurtleSetLedBrightness": "设置彩灯的亮度",
  "Controller.TurtleSetLedBrightness|param|level": "亮度的等级0-100",
  "Controller.TurtleSetLedColor": "将RGB LED灯的颜色设置为标准颜色",
  "Controller.TurtleSetLedColor|param|color": "要设置的颜色",
  "Controller.TurtleSetLedColor|param|led": "要设置的彩灯的编号, 例如: LED1, LED3",
  "Controller.TurtleSetLedValue": "设置彩灯的RGB三原色的值",
  "Controller.TurtleSetLedValue|param|blue": "RGB三原色的蓝色值",
  "Controller.TurtleSetLedValue|param|green": "RGB三原色的绿色值",
  "Controller.TurtleSetLedValue|param|led": "要设置的彩灯的编号, 例如: LED1, LED3",
  "Controller.TurtleSetLedValue|param|red": "RGB三原色的红色值",
  "Controller.TurtleSetServoAngle": "设置舵机的目标角度",
  "Controller.TurtleSetServoAngle|param|degree": "目标角度, 例如: 0, 30, 109.",
  "Controller.TurtleSetServoAngle|param|servoId": "舵机编号, 例如: S1, S2",
  "Controls.isPushButtonPressed": "检查按钮是否被按下",
  "Controls.isPushButtonPressed|param|port": "模块要连接到的microbit的引脚",
  "Controls.isTouchButtonTouched": "检查触摸按键模块是否被按下",
  "Controls.onPushButtonPressed": "当按钮模块被按下时执行一段代码",
  "Controls.onPushButtonPressed|param|body": "当事件发生时要执行的代码",
  "Controls.onPushButtonPressed|param|port": "模块要连接到的microbit的引脚",
  "Controls.onTouchButtonTouched": "当触摸模块被按下时执行一段代码",
  "Controls.onTouchButtonTouched|param|body": "当事件发生时要执行的代码",
  "Controls.onTouchButtonTouched|param|port": "模块要连接到的microbit的引脚",
  "Controls.rotationAngle": "读取旋转传感器的角度值",
  "Controls.rotationAngle|param|port": "模块要连接到的microbit",
  "Display.digitalTubeClear": "清空数码管显示屏",
  "Display.digitalTubeOff": "关闭数码管显示屏",
  "Display.digitalTubeOn": "打开数码管显示屏",
  "Display.digitalTubeSetIntensity": "设置数码管显示屏的亮度",
  "Display.digitalTubeSetPoint": "设置数码管显示屏某一位小数点是否显示",
  "Display.digitalTubeSetPoint|param|pos": "待设置的小数点的编号",
  "Display.digitalTubeSetPoint|param|show": "是否显示",
  "Display.digitalTubeShowDigit": "在数码管显示屏的某一位显示一个数字",
  "Display.digitalTubeShowDigit|param|pos": "显示屏的位置",
  "Display.digitalTubeShowDigit|param|value": "要显示的数字",
  "Display.digitalTubeShowNumber": "在数码管显示屏上显示数字",
  "Display.digitalTubeShowNumber|param|value": "要显示的数字",
  "Display.oledClear": "清空OLED显示屏",
  "Display.oledShowUserNumber": "在OLED显示屏的某一行显示数字",
  "Display.oledShowUserNumber|param|line": "显示屏的行号",
  "Display.oledShowUserNumber|param|n": "要显示的数字",
  "Display.oledShowUserText": "在OLED显示屏的某一行显示字符串",
  "Display.oledShowUserText|param|line": "显示屏的行号",
  "Display.oledShowUserText|param|text": "要显示的字符串",
  "Display.setIndicatorBrightness": "设置指示灯模块的亮度",
  "Display.setIndicatorBrightness|param|brightness": "亮度几倍",
  "Display.setIndicatorBrightness|param|port": "模块要连接到的microbit引脚",
  "Display.setIndicatorState": "设置指示灯模块的状态(打开或关闭)",
  "Display.setIndicatorState|param|port": "模块要连接到的microbit的引脚",
  "Display.setIndicatorState|param|state": "状态",
  "Display.setRGBLedColor": "设置RGB模块的颜色",
  "Display.setRGBLedColor|param|color": "要配置的颜色",
  "Display.setRGBLedColor|param|port": "模块要连接到的microbit的引脚",
  "Display.setRGBLedsBrightness": "要设置的亮度",
  "Display.setRGBLedsBrightness|param|port": "模块要连接到的microbit的引脚",
  "Display.setWhiteLedBrightness": "设置白光LED模块的亮度",
  "Display.setWhiteLedBrightness|param|brightness": "亮度几倍",
  "Display.setWhiteLedBrightness|param|port": "模块要连接到的microbit引脚",
  "Drives.setFanSpeed": "设置小风扇模块的速度",
  "Drives.setFanSpeed|param|port": "模块要连接到的microbit引脚",
  "Drives.setFanSpeed|param|speed": "要设置的速度",
  "NeoPixelColors": "Well known colors for a NeoPixel strip",
  "NeoPixelMode": "Different modes for RGB or RGB+W NeoPixel strips",
  "Sensors.color": "获取颜色识别传感器的值",
  "Sensors.color|param|color": "要读取的颜色通道",
  "Sensors.currGesture": "获取当前的手势类型",
  "Sensors.environmentValue": "获取温湿度传感器的温度或湿度值",
  "Sensors.environmentValue|param|port": "模块要连接到的microbit引脚",
  "Sensors.environmentValue|param|src": "读取的类型 ",
  "Sensors.gasIntensity": "获取烟雾传感器探测到的浓度",
  "Sensors.gasIntensity|param|port": "模块要连接到的microbit引脚",
  "Sensors.isHumanBodyDetected": "检查是否检测到移动",
  "Sensors.isHumanBodyDetected|param|port": "模块要连接到的microbit引脚",
  "Sensors.isLimitSensorPressed": "检查碰撞开关是否被触发",
  "Sensors.isLimitSensorPressed|param|port": "模块要连接到的microbit引脚",
  "Sensors.lightIntensity": "获取亮度级别",
  "Sensors.lightIntensity|param|port": "模块要连接到的microbit引脚",
  "Sensors.magnetDetected": "检查霍尔传感器是否检测带磁铁",
  "Sensors.magnetDetected|param|port": "模块要连接到的microbit引脚",
  "Sensors.onGesture": "当手势传感器检测到新的手势时执行一段代码",
  "Sensors.onGesture|param|body": "当事件发生时要执行的代码",
  "Sensors.onGesture|param|ges": "模块要连接到的microbit的引脚",
  "Sensors.onHumanBodyDetected": "当人体红外传感器及测到移动时执行一段代码",
  "Sensors.onHumanBodyDetected|param|body": "当事件发生时要执行的代码",
  "Sensors.onHumanBodyDetected|param|port": "模块要连接到的microbit的引脚",
  "Sensors.onLimitSensorPressed": "当碰撞开发被按下时执行一段代码",
  "Sensors.onLimitSensorPressed|param|body": "当事件发生时要执行的代码",
  "Sensors.onLimitSensorPressed|param|port": "模块要连接到的microbit的引脚",
  "Sensors.onMagnetDetected": "当霍尔传感器检测到磁铁时执行一段代码",
  "Sensors.onMagnetDetected|param|body": "当事件发生时要执行的代码",
  "Sensors.onMagnetDetected|param|port": "模块要连接到的microbit的引脚",
  "Sensors.onTrackingStateChanged": "当巡线传感器状态发生改变时候执行一段代码",
  "Sensors.onTrackingStateChanged|param|body": "当事件发生时要执行的代码",
  "Sensors.onTrackingStateChanged|param|port": "模块要连接到的microbit的引脚",
  "Sensors.onVibration": "当震动传感器检测到震动时执行一段代码",
  "Sensors.onVibration|param|body": "当事件发生时要执行的代码",
  "Sensors.onVibration|param|port": "模块要连接到的microbit的引脚",
  "Sensors.soilMoisture": "获取土壤湿度值",
  "Sensors.soilMoisture|param|port": "模块要连接到的microbit引脚",
  "Sensors.sonar": "读取超声波传感器的距离值",
  "Sensors.sonar|param|port": "模块要连接到的microbit引脚",
  "Sensors.sonar|param|unit": "数值的单位",
  "Sensors.soundLevel": "获取声音的响度值",
  "Sensors.soundLevel|param|port": "模块要连接到的microbit引脚",
  "Sensors.trackingStateIs": "检查当前巡线传感器的状态",
  "Sensors.trackingStateIs|param|port": "模块要连接到的microbit引脚",
  "Sensors.trackingStateIs|param|state": "要检查的状态",
  "Sensors.vibrationHappened": "是否检测到震动",
  "Sensors.vibrationHappened|param|port": "模块要连接到的microbit引脚",
  "Sensors.waterLevel": "从水位传感器读取当前的水位值",
  "Sensors.waterLevel|param|port": "模块要连接到的microbit引脚"
}