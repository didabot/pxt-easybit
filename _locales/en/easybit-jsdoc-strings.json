{
  "Audio.next": "play next audio.",
  "Audio.pause": "pause play.",
  "Audio.play": "start play audio.",
  "Audio.playNumber": "play audio with number.",
  "Audio.playNumber|param|num": "song number",
  "Audio.previous": "play previous song.",
  "Audio.setVolume": "set volume level.",
  "Audio.stop": "stop play audio.",
  "Audio.volumeDown": "set volume down.",
  "Audio.volumeUp": "set volume up.",
  "Controller.OctopusClearAllLeds": "octopus board clear all LED.",
  "Controller.OctopusRunMotor": "octopus board run motor with speed.",
  "Controller.OctopusRunMotorDuration": "octopus board run motor for a duration in milliseconds",
  "Controller.OctopusRunMotorDuration|param|duration": "running duration in milliseconds",
  "Controller.OctopusRunMotorDuration|param|m": "motor number, eg: M1, M2",
  "Controller.OctopusRunMotorDuration|param|speed": "target speed",
  "Controller.OctopusRunMotor|param|m": "motor number, eg: M1, M2",
  "Controller.OctopusRunMotor|param|speed": "target speed",
  "Controller.OctopusSetLedBrightness": "octopus board set RGB LED brightness level.",
  "Controller.OctopusSetLedBrightness|param|level": "brightness level 0-100",
  "Controller.OctopusSetLedColor": "set led stardard color mounting on octopus board.",
  "Controller.OctopusSetLedColor|param|color": "color",
  "Controller.OctopusSetLedColor|param|led": "RGB LED number, eg: LED1, LED3",
  "Controller.OctopusSetLedValue": "octopus set RGB led color with raw rgb value. \n\n\n\n\n*",
  "Controller.OctopusSetLedValue|param|blue": "blue value of RGB",
  "Controller.OctopusSetLedValue|param|green": "green value of RGB",
  "Controller.OctopusSetLedValue|param|led": "RGB LED number, eg: LED1, LED3",
  "Controller.OctopusSetLedValue|param|red": "red value of RGB",
  "Controller.OctopusSetServoAngle": "octopus board set servo target angle.",
  "Controller.OctopusSetServoAngle|param|degree": "target angle of servo, eg: 0, 30, 109.",
  "Controller.OctopusSetServoAngle|param|servoId": "servo number, eg: S1, S2",
  "Controller.OctopusStopAllMotors": "octopus board stop all motors",
  "Controller.OctopusStopMotor": "octopus board stop motor.",
  "Controller.OctopusStopMotor|param|m": "motor number, eg: M1, M2",
  "Controller.TurtleClearAllLeds": "clear all RGB leds mounting on turtle board.",
  "Controller.TurtleSetLedBrightness": "set RGB led brightness mounting on turtle board.",
  "Controller.TurtleSetLedBrightness|param|level": "brightness level 0-100",
  "Controller.TurtleSetLedColor": "set led stardard color mounting on turtle board.",
  "Controller.TurtleSetLedColor|param|color": "color",
  "Controller.TurtleSetLedColor|param|led": "RGB LED number, eg: LED1, LED3",
  "Controller.TurtleSetLedValue": "turtle board set RGB led color with raw rgb value.",
  "Controller.TurtleSetLedValue|param|blue": "blue value of RGB",
  "Controller.TurtleSetLedValue|param|green": "green value of RGB",
  "Controller.TurtleSetLedValue|param|led": "RGB LED number, eg: LED1, LED3",
  "Controller.TurtleSetLedValue|param|red": "red value of RGB",
  "Controller.TurtleSetServoAngle": "turtle board set servo target angle",
  "Controller.TurtleSetServoAngle|param|degree": "target angle of servo, eg: 0, 30, 109.",
  "Controller.TurtleSetServoAngle|param|servoId": "servo number, eg: S1, S2",
  "Controls.isPushButtonPressed": "Check wether the push button is pressed or not.",
  "Controls.isPushButtonPressed|param|port": "microbit digital port",
  "Controls.isTouchButtonTouched": "Check wether the push button is touched or not.",
  "Controls.onPushButtonPressed": "Do something when a push button is pushed down and released again.",
  "Controls.onPushButtonPressed|param|body": "code to run when event is raised",
  "Controls.onPushButtonPressed|param|port": "microbit digital pin",
  "Controls.onTouchButtonTouched": "Do something when a touch button is touched down and released again.",
  "Controls.onTouchButtonTouched|param|body": "code to run when event is raised",
  "Controls.onTouchButtonTouched|param|port": "microbit digital pin",
  "Controls.rotationAngle": "Get the rotation sensor position.",
  "Controls.rotationAngle|param|port": "microbit analog port",
  "Display.digitalTubeClear": "clear segment display",
  "Display.digitalTubeOff": "turn segment display off",
  "Display.digitalTubeOn": "turn 4-digit segment display on",
  "Display.digitalTubeSetIntensity": "set segment display intensity",
  "Display.digitalTubeSetPoint": "set dot point state on segment display",
  "Display.digitalTubeSetPoint|param|pos": "bit to show",
  "Display.digitalTubeSetPoint|param|show": "show or not",
  "Display.digitalTubeShowDigit": "show digital at segment display",
  "Display.digitalTubeShowDigit|param|pos": "position of number",
  "Display.digitalTubeShowDigit|param|value": "number to be shown on display",
  "Display.digitalTubeShowNumber": "show number on segment display",
  "Display.digitalTubeShowNumber|param|value": "number to be shown on display",
  "Display.oledClear": "clear contents on OLED display",
  "Display.oledShowUserNumber": "show a number on the OLED display",
  "Display.oledShowUserNumber|param|line": "line number showing on",
  "Display.oledShowUserNumber|param|n": "number to show on",
  "Display.oledShowUserText": "show string on the OLED display",
  "Display.oledShowUserText|param|line": "line number showing on",
  "Display.oledShowUserText|param|text": "string to show on",
  "Display.setIndicatorBrightness": "Set indicator led brightness.",
  "Display.setIndicatorBrightness|param|brightness": "brightness level to set",
  "Display.setIndicatorBrightness|param|port": "microbit analog output port",
  "Display.setIndicatorState": "Set indicator led state (on or off).",
  "Display.setIndicatorState|param|port": "microbit digital port",
  "Display.setIndicatorState|param|state": "led state",
  "Display.setRGBLedColor": "set rgb led color to a standard color.",
  "Display.setRGBLedColor|param|color": "color",
  "Display.setRGBLedColor|param|port": "microbit digital port",
  "Display.setRGBLedsBrightness": "set rgb led brightness.",
  "Display.setRGBLedsBrightness|param|port": "microbit digital port",
  "Display.setWhiteLedBrightness": "Set white led brightness.",
  "Display.setWhiteLedBrightness|param|brightness": "brightness level to set",
  "Display.setWhiteLedBrightness|param|port": "microbit analog output port",
  "Drives.setFanSpeed": "set fan speed.",
  "Drives.setFanSpeed|param|port": "microbit analog output port",
  "Drives.setFanSpeed|param|speed": "fan speed expect to set",
  "NeoPixelColors": "Well known colors for a NeoPixel strip",
  "NeoPixelMode": "Different modes for RGB or RGB+W NeoPixel strips",
  "Sensors.color": "Get the color raw data from color sensor.",
  "Sensors.color|param|color": "data source to read from",
  "Sensors.currGesture": "Get the current gesture.",
  "Sensors.environmentValue": "get environment temperature or humidity value",
  "Sensors.environmentValue|param|port": "microbit didgital port",
  "Sensors.environmentValue|param|src": "value type ",
  "Sensors.gasIntensity": "Get the gas intensity.",
  "Sensors.gasIntensity|param|port": "microbit analog input port",
  "Sensors.isHumanBodyDetected": "Get the pir sensor state.",
  "Sensors.isHumanBodyDetected|param|port": "microbit didgital port",
  "Sensors.isLimitSensorPressed": "Get the crash sensor state (pressed or not).",
  "Sensors.isLimitSensorPressed|param|port": "microbit didgital port",
  "Sensors.lightIntensity": "Get the light intensity.",
  "Sensors.lightIntensity|param|port": "microbit analog input port",
  "Sensors.magnetDetected": "Get the hall sensor state.",
  "Sensors.magnetDetected|param|port": "microbit didgital port",
  "Sensors.onGesture": "Do something a new gesture is detected by gesture sensor.",
  "Sensors.onGesture|param|body": "code to run when event is raised",
  "Sensors.onGesture|param|ges": "microbit digital pin",
  "Sensors.onHumanBodyDetected": "Do something when motion is detected by a PIR sensor.",
  "Sensors.onHumanBodyDetected|param|body": "code to run when event is raised",
  "Sensors.onHumanBodyDetected|param|port": "microbit digital pin",
  "Sensors.onLimitSensorPressed": "Do something when crash sensor is pressed.",
  "Sensors.onLimitSensorPressed|param|body": "code to run when event is raised",
  "Sensors.onLimitSensorPressed|param|port": "microbit digital pin",
  "Sensors.onMagnetDetected": "Do something when magnet is detected by the hall sensor.",
  "Sensors.onMagnetDetected|param|body": "code to run when event is raised",
  "Sensors.onMagnetDetected|param|port": "microbit digital pin",
  "Sensors.onTrackingStateChanged": "Do something when tracking state is changed.",
  "Sensors.onTrackingStateChanged|param|body": "code to run when event is raised",
  "Sensors.onTrackingStateChanged|param|port": "microbit digital pin",
  "Sensors.onVibration": "Do something when vibration sensor is detected by the vibration sensor.",
  "Sensors.onVibration|param|body": "code to run when event is raised",
  "Sensors.onVibration|param|port": "microbit digital pin",
  "Sensors.soilMoisture": "Get the soil moisture value.",
  "Sensors.soilMoisture|param|port": "microbit analog input port",
  "Sensors.sonar": "Get distance from ultrasonic sensor.",
  "Sensors.sonar|param|port": "easybit port connect to",
  "Sensors.sonar|param|unit": "unit expect to display",
  "Sensors.soundLevel": "Get the sound value from a sound sensor.",
  "Sensors.soundLevel|param|port": "microbit analog input port",
  "Sensors.trackingStateIs": "Check the tracking state.",
  "Sensors.trackingStateIs|param|port": "microbit didgital port",
  "Sensors.trackingStateIs|param|state": "state to check with",
  "Sensors.vibrationHappened": "Get the vibration state.",
  "Sensors.vibrationHappened|param|port": "microbit didgital port",
  "Sensors.waterLevel": "Get the level value from water level sensor.",
  "Sensors.waterLevel|param|port": "microbit analog input port",
  "neopixel.Strip": "A NeoPixel strip",
  "neopixel.Strip.clear": "Turn off all LEDs.\r\nYou need to call ``show`` to make the changes visible.",
  "neopixel.Strip.easeBrightness": "Apply brightness to current colors using a quadratic easing function.",
  "neopixel.Strip.length": "Gets the number of pixels declared on the strip",
  "neopixel.Strip.power": "Estimates the electrical current (mA) consumed by the current light configuration.",
  "neopixel.Strip.range": "Create a range of LEDs.",
  "neopixel.Strip.range|param|length": "number of LEDs in the range. eg: 4",
  "neopixel.Strip.range|param|start": "offset in the LED strip to start the range",
  "neopixel.Strip.rotate": "Rotate LEDs forward.\r\nYou need to call ``show`` to make the changes visible.",
  "neopixel.Strip.rotate|param|offset": "number of pixels to rotate forward, eg: 1",
  "neopixel.Strip.setBrightness": "Set the brightness of the strip. This flag only applies to future operation.",
  "neopixel.Strip.setBrightness|param|brightness": "a measure of LED brightness in 0-255. eg: 255",
  "neopixel.Strip.setMatrixColor": "Set LED to a given color (range 0-255 for r, g, b) in a matrix shaped strip \r\nYou need to call ``show`` to make the changes visible.",
  "neopixel.Strip.setMatrixColor|param|rgb": "RGB color of the LED",
  "neopixel.Strip.setMatrixColor|param|x": "horizontal position",
  "neopixel.Strip.setMatrixColor|param|y": "horizontal position",
  "neopixel.Strip.setMatrixWidth": "Sets the number of pixels in a matrix shaped strip",
  "neopixel.Strip.setMatrixWidth|param|width": "number of pixels in a row",
  "neopixel.Strip.setPin": "Set the pin where the neopixel is connected, defaults to P0.",
  "neopixel.Strip.setPixelColor": "Set LED to a given color (range 0-255 for r, g, b). \r\nYou need to call ``show`` to make the changes visible.",
  "neopixel.Strip.setPixelColor|param|pixeloffset": "position of the NeoPixel in the strip",
  "neopixel.Strip.setPixelColor|param|rgb": "RGB color of the LED",
  "neopixel.Strip.setPixelWhiteLED": "For NeoPixels with RGB+W LEDs, set the white LED brightness. This only works for RGB+W NeoPixels.",
  "neopixel.Strip.setPixelWhiteLED|param|pixeloffset": "position of the LED in the strip",
  "neopixel.Strip.setPixelWhiteLED|param|white": "brightness of the white LED",
  "neopixel.Strip.shift": "Shift LEDs forward and clear with zeros.\r\nYou need to call ``show`` to make the changes visible.",
  "neopixel.Strip.shift|param|offset": "number of pixels to shift forward, eg: 1",
  "neopixel.Strip.show": "Send all the changes to the strip.",
  "neopixel.Strip.showBarGraph": "Displays a vertical bar graph based on the `value` and `high` value.\r\nIf `high` is 0, the chart gets adjusted automatically.",
  "neopixel.Strip.showBarGraph|param|high": "maximum value, eg: 255",
  "neopixel.Strip.showBarGraph|param|value": "current value to plot",
  "neopixel.Strip.showColor": "Shows all LEDs to a given color (range 0-255 for r, g, b).",
  "neopixel.Strip.showColor|param|rgb": "RGB color of the LED",
  "neopixel.Strip.showRainbow": "Shows a rainbow pattern on all LEDs.",
  "neopixel.Strip.showRainbow|param|endHue": "the end hue value for the rainbow, eg: 360",
  "neopixel.Strip.showRainbow|param|startHue": "the start hue value for the rainbow, eg: 1",
  "neopixel.colors": "Gets the RGB value of a known color",
  "neopixel.create": "Create a new NeoPixel driver for `numleds` LEDs.",
  "neopixel.create|param|numleds": "number of leds in the strip, eg: 24,30,60,64",
  "neopixel.create|param|pin": "the pin where the neopixel is connected.",
  "neopixel.hsl": "Converts a hue saturation luminosity value into a RGB color",
  "neopixel.hsl|param|h": "hue from 0 to 360",
  "neopixel.hsl|param|l": "luminosity from 0 to 99",
  "neopixel.hsl|param|s": "saturation from 0 to 99",
  "neopixel.rgb": "Converts red, green, blue channels into a RGB color",
  "neopixel.rgb|param|blue": "value of the blue channel between 0 and 255. eg: 255",
  "neopixel.rgb|param|green": "value of the green channel between 0 and 255. eg: 255",
  "neopixel.rgb|param|red": "value of the red channel between 0 and 255. eg: 255"
}